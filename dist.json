{"index.html":"<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <link rel=\"stylesheet\" href=\"https://unpkg.com/buefy/dist/buefy.min.css\">\n    </head>\n\n    <body>\n        <div v-scope>\n            <div class=\"container\">\n              <div class=\"box\" v-if=\"waddr\">\n                  <label class=\"label\">Address</label>\n                  <div class=\"control\">\n                      <input class=\"input\" type=\"text\" disabled v-model=\"waddr\">\n                  </div>\n                  <div v-if=\"chainId=='0x1336'\">\n                      <label class=\"label\"></label>\n                      <div class=\"control\">\n                          <button class=\"button is-primary\" @click=\"airdrop\">Airdrop</button>\n                      </div>\n                  </div>\n                  <div v-else>\n                      <div class=\"notification is-primary\">\n                          <p>Wrong network</p>\n                          <button @click=\"switchNet\" class=\"button is-warning\">Switch to Venidium Testnet</button>\n                      </div>\n                  </div>\n              </div>\n              <button v-else @click=\"connect\" class=\"button is-primary\">Connect Wallet</button>\n            </div>\n        </div>\n        <script src=\"https://unpkg.com/petite-vue\"></script>\n        <script src=\"https://unpkg.com/buefy/dist/buefy.min.js\"></script>\n        <script>\n          const ethereum = window.ethereum\n          PetiteVue.createApp({\n            waddr: false,\n            chainId: false,\n            initialized: false,\n            async connect(){\n                if (typeof ethereum !== 'undefined') {\n                    await this.initialize()\n                    const user = await ethereum.request({ method:'eth_requestAccounts' })\n                    this.chainId = await ethereum.request({ method:'eth_chainId' })\n                    if(user&&user[0]){\n                        this.waddr = user[0]\n                    }\n                    console.log('connect done')\n                }\n            },\n            async initialize(){\n                if(!this.initialized){\n                    this.initialized = true\n                    const root = this\n                    console.log('initialize')\n                    ethereum.on('connect', async (cinfo)=>{\n                        console.log('connect-info', cinfo)\n                        if(!root.chainId){\n                            root.chainId = cinfo.chainId\n                        }\n                        if(!root.waddr){\n                            const user = await ethereum.request({ method:'eth_requestAccounts' })\n                            if(user&&user[0]){\n                                root.waddr = user[0]\n                            }\n                        }\n                    })\n                    ethereum.on('disconnect', ()=>{\n                        console.log('disconnected')\n                        root.waddr = false\n                        root.chainId = false\n                    })\n \n                    ethereum.on('accountsChanged', (accounts)=>{\n                       if(accounts.length>0){\n                           root.waddr = accounts[0]\n                       }else{\n                           root.waddr = false\n                       }\n                    })\n                    ethereum.on('chainChanged', async (chainId)=>{\n                        if(chainId!=root.chainId){\n                            root.chainId = chainId\n                        }\n                    })\n                }\n            },\n            async addNet(){\n                try {\n                    const res = await ethereum.request({\n                        method: 'wallet_addEthereumChain',\n                        params:[{\n                            chainId: '0x1336',\n                            chainName: 'Venidium EVM Testnet',\n                            rpcUrls: [\n                                \"https://rpc-evm-testnet.venidium.io\"\n                            ],\n                            nativeCurrency:{\n                                name: \"Venidium\",\n                                symbol: \"XVM\",\n                                decimals: 18\n                            },\n                            blockExplorerUrls:[\n                                \"https://evm-testnet.venidiumexplorer.com\"\n                            ]\n                        }]\n                    })\n                }catch(e){\n                    return false\n                }\n                return true\n            },\n            async switchNet(){\n                try {\n                    const res = await ethereum.request({method: 'wallet_switchEthereumChain', \n                        params:[{chainId:'0x1336'}]})\n                }catch(e){\n                    if('code' in e && e.code==4902){\n                        if(await this.addNet()){\n                            await this.switchNet()\n                        }\n                    }else{\n                        console.log('error', e)\n                    }\n                }\n            },\n            async airdrop(){\n                let xhr = new XMLHttpRequest();\n                xhr.open(\"POST\", \"/airdrop\");\n                xhr.setRequestHeader(\"Accept\", \"application/json\");\n                xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n                xhr.onload = () => {\n                    const res = JSON.parse(xhr.responseText)\n                    if(res.success){\n                        alert('ok')\n                    }else{\n                        alert(res.reason)\n                    }\n                    console.log(xhr.responseText);\n                }\n                const data = {\n                    addr: this.waddr,\n                    chain: this.chainId\n                }\n                xhr.send(JSON.stringify(data));\n            }\n          }).mount()\n          function connected(info){\n              console.log('connect info', info)\n          }\n          ethereum.on('connect', connected)\n        </script>\n    </body>\n</html>\n"}