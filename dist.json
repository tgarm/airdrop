{"airdrop-abi.json":"airdrop_abi = [\n\t{\n\t\t\"anonymous\": false,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"indexed\": false,\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"indexed\": false,\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"Received\",\n\t\t\"type\": \"event\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"name\": \"claim\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"name\": \"redeem\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"stateMutability\": \"payable\",\n\t\t\"type\": \"receive\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"constructor\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"name\": \"claimable\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"name\": \"needWait\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t}\n]\n","index.html":"<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css\">\n    </head>\n    <body>\n        <section class=\"section\">\n            <div v-scope>\n                <div class=\"container\">\n                  <h1 class='title'>Venidium Testnet Faucet/Airdrop</h1>\n                  <div class=\"box\" v-if=\"waddr\">\n                      <div v-if=\"chainId=='0x1336'\">\n                          <label class=\"label\">Address</label>\n                          <div class=\"control\">\n                              <input class=\"input\" type=\"text\" disabled v-model=\"waddr\">\n                          </div>\n                          <label v-if=\"balance\" class=\"label\">Balance</label>\n                          <div v-if=\"balance\" class=\"control\">\n                              <input class=\"input\" type=\"text\" disabled v-model=\"balance\">\n                          </div>\n                          <div class=\"control\">\n                              <button :class=\"loading?'is-loading':''\" class=\"button is-primary\" @click=\"airdrop\">Airdrop</button>\n                          </div>\n                          <div v-if=\"high_balance\" class=\"control\">\n                              <label class=\"label\">Faucet Balance:<span>{{fbalance}}</span></label>\n                              <button :class=\"loading?'is-loading':''\" class=\"button\" @click=\"donate\">Donate 10 Test Coin</button>\n                          </div>\n                      </div>\n                      <div v-else>\n                          <div class=\"notification is-primary\">\n                              <p>Wrong network</p>\n                              <button @click=\"switchNet\" class=\"button is-warning\">Switch to Venidium Testnet</button>\n                          </div>\n                      </div>\n                  </div>\n                  <button v-else @click=\"connect\" class=\"button is-primary\">Connect Wallet</button>\n                </div>\n            </div>\n        </section>\n        <script src=\"https://unpkg.com/petite-vue\"></script>\n        <script src='https://cdn.jsdelivr.net/npm/bignumber.js@9.0.2/bignumber.min.js'></script>\n        <script src=\"//cdn.jsdelivr.net/npm/sweetalert2@11\"></script>\n        <script src=\"https://cdn.ethers.io/lib/ethers-5.0.umd.min.js\" type=\"text/javascript\"></script>\n        <script src=\"/airdrop-abi.json\" type=\"text/javascript\"></script>\n        <script>\n          const ethereum = window.ethereum\n          const provider = new ethers.providers.Web3Provider(ethereum, \"any\")\n          const airdrop_ctr = new ethers.Contract('0xC575a07d8490154B4B544e188aE2Ce3192e90Ce2',airdrop_abi,provider.getSigner())\n          const CHAIN_ID='0x1336'\n          PetiteVue.createApp({\n            waddr: false,\n            high_balance: false,\n            balance: false,\n            chainId: false,\n            initialized: false,\n            dropFrom:'<%= addr %>',\n            fbalance: false,\n            loading: false,\n            async connect(){\n                this.loading = true\n                if (typeof ethereum !== 'undefined') {\n                    await this.initialize()\n                    if(await this.ensureNet()){\n                        this.chainId = await ethereum.request({ method:'eth_chainId' })\n                        const user = await ethereum.request({ method:'eth_requestAccounts' })\n                        if(user&&user[0]){\n                            this.waddr = user[0]\n                        }\n                        await this.loadBalance()\n                    }\n                }\n                this.loading = false\n            },\n            async initialize(){\n                if(!this.initialized){\n                    this.initialized = true\n                    const root = this\n                    ethereum.on('connect', async (cinfo)=>{\n                        if(!root.chainId){\n                            root.chainId = cinfo.chainId\n                        }\n                        if(!root.waddr){\n                            const user = await ethereum.request({ method:'eth_requestAccounts' })\n                            if(user&&user[0]){\n                                root.waddr = user[0]\n                            }\n                        }\n                    })\n                    ethereum.on('disconnect', ()=>{\n                        console.log('disconnected')\n                        root.waddr = false\n                        root.chainId = false\n                    })\n \n                    ethereum.on('accountsChanged', (accounts)=>{\n                       if(accounts.length>0){\n                           root.waddr = accounts[0]\n                       }else{\n                           root.waddr = false\n                       }\n                       this.loadBalance()\n                    })\n                    ethereum.on('chainChanged', async (chainId)=>{\n                        if(chainId!=root.chainId){\n                            root.chainId = chainId\n                        }\n                        await this.loadBalance()\n                    })\n                }\n            },\n            async loadBalance(){\n                this.high_balance = false\n                if(this.chainId==CHAIN_ID){\n                    if(this.waddr){\n                        const balance = await ethereum.request({ method: 'eth_getBalance', params: [this.waddr, 'latest'] })\n                        const bn = (new BigNumber(balance)).dividedBy(1e18)\n                        this.balance = bn.toNumber()\n                        if(bn>=20){\n                            this.high_balance = true\n                        }\n                        console.log('balance', this.balance)\n                    }else{\n                        this.balance = false\n                    }\n                    if(this.dropFrom){\n                        const balance = await ethereum.request({ method: 'eth_getBalance', params: [this.dropFrom, 'latest'] })\n                        const bn = (new BigNumber(balance)).dividedBy(1e18)\n                        this.fbalance = bn.toNumber()\n                    }\n                }\n            },\n            async addNet(){\n                try {\n                    const res = await ethereum.request({\n                        method: 'wallet_addEthereumChain',\n                        params:[{\n                            chainId: CHAIN_ID,\n                            chainName: 'Venidium EVM Testnet',\n                            rpcUrls: [\n                                \"https://rpc-evm-testnet.venidium.io\"\n                            ],\n                            nativeCurrency:{\n                                name: \"Venidium\",\n                                symbol: \"XVM\",\n                                decimals: 18\n                            },\n                            blockExplorerUrls:[\n                                \"https://evm-testnet.venidiumexplorer.com\"\n                            ]\n                        }]\n                    })\n                }catch(e){\n                    return false\n                }\n                return true\n            },\n            async switchNet(){\n                try {\n                    const res = await ethereum.request({method: 'wallet_switchEthereumChain', \n                        params:[{chainId:CHAIN_ID}]})\n                }catch(e){\n                    if('code' in e && e.code==4902){\n                        if(await this.addNet()){\n                            await this.switchNet()\n                        }\n                    }else{\n                        console.log('error', e)\n                    }\n                }\n            },\n            async ensureNet(){\n                let chainId = await ethereum.request({ method:'eth_chainId' })\n                if(chainId!=CHAIN_ID){\n                    await this.switchNet()\n                    chainId = await ethereum.request({ method:'eth_chainId' })\n                }\n                if(chainId==CHAIN_ID){\n                    return true\n                }else{\n                    return false\n                }\n            },\n            async airdrop(){\n                if(this.balance>=0.01){\n                    const claimable = await airdrop_ctr.claimable()\n                    if(claimable.gt(0)){\n                        const nw = await airdrop_ctr.needWait()\n                        if(nw.gt(0)){\n                            Swal.fire({\n                                title: 'Fail',\n                                text: `Please wait for ${nw.toNumber()} seconds for cooldown`,\n                            })\n                        }else{\n                            const res = await airdrop_ctr.claim()\n                            if('hash' in res){\n                                this.loading = true\n                                await provider.waitForTransaction(res.hash)\n                                await this.loadBalance()\n                                this.loading = false\n                            }\n                        }\n                    }else{\n                        Swal.fire({\n                            title: 'Fail',\n                            text: 'Nothing to claim, maybe you have got quite a lot XVM, or this faucet is out of fund'\n                        })\n                    }\n                }else{\n                    this.loading = true\n                    let xhr = new XMLHttpRequest();\n                    xhr.open(\"POST\", \"/airdrop\");\n                    xhr.setRequestHeader(\"Accept\", \"application/json\");\n                    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n                    xhr.onload = async () => {\n                        const res = JSON.parse(xhr.responseText)\n                        if(res.success){\n                            await provider.waitForTransaction(res.txid)\n                            await this.loadBalance()\n                            this.loading = false\n                            Swal.fire({\n                                title: 'Done',\n                                text: '0.01 XVM has been sent to your wallet'\n                            })\n                        }else{\n                            this.loading = false\n                            switch(res.reason){\n                                case 'balance':\n                                    Swal.fire({\n                                        title: 'Failed',\n                                        text: 'You already have more than 0.01 XVM'\n                                    })\n                                    break\n                                default:\n                                    Swal.fire({\n                                        title: 'Failed',\n                                        text: `Reason: ${res.reason}`\n                                    })\n                            }\n                        }\n                    }\n                    const data = {\n                        addr: this.waddr,\n                        chain: this.chainId\n                    }\n                    xhr.send(JSON.stringify(data));\n                }\n            },\n            async donate(){\n                const amount = (new BigNumber(1e18)).multipliedBy(10)\n                const txargs = {\n                    to: this.dropFrom,\n                    from: this.waddr,\n                    value: amount.toString(16)\n                }\n                const txid = await ethereum.request({\n                    method: 'eth_sendTransaction',\n                    params: [txargs]\n                })\n                this.loading = true\n                if(txid){\n                    await provider.waitForTransaction(txid)\n                    await this.loadBalance()\n                    this.loading = false\n                    Swal.fire({\n                        title: 'Done',\n                        text: 'Thank you for your kind support!'\n                    })\n                }else{\n                    this.loading = false\n                }\n            }\n          }).mount()\n        </script>\n    </body>\n</html>\n","/":""}